{# Tutorial Report - Settings Template - Twig Template Report

The name of each option is defined by the 'name' attribute on each <input> field. When the settings are loaded, all settings are available by name via the 'settings' array. These option values will also be available to your Reports Template using the same syntax. To access an option:

    {{ settings.myCustomField }}
    {{ settings.anotherCustomField }}

By default, Twig Template Reports support several common fields used in reports. An example of each field type is below:

    - Text
    - Textarea
    - Dropdown
    - Radio Buttons
    - Checkboxes
    - Lightswitch
    - DateTime (requires that you start the field name with "datetime". See below.)

Additional field types can be used, but some fields with advanced validation may require that you create a custom Data Source. The only field Twig Template Reports support with advanced validation requirements is the DateTime field.
#}

{# Include the Craft CP form macros - we use these to make the settings in our reports use the same styles as the Craft interface #}
{% import "_includes/forms" as forms %}

<h3>{{ "Basic Fields"|t }}</h3>

{# Add the attribute `first: true` to the first field in your list to adjust the padding at the top of your field list to feel nice in the Craft UI. You can add the `required: true` attribute to make any field required. Find Craft's form macros in the `craft/app/templates/_includes` folder to explore all the form macro options. #}

{{ forms.textField({
    label: "Example Text Field"|t,
    instructions: "You can add instructions to all field types."|t,
    name: "exampleTextField",
    maxlength: 64,
    value: (settings.exampleTextField is defined ? settings.exampleTextField : null),
    first: true,
}) }}

{{ forms.textareaField({
    label: "Example Textarea Field"|t,
    name: "exampleTextareaField",
    value: (settings.exampleTextareaField is defined ? settings.exampleTextareaField : null)
}) }}

{{ forms.textField({
    label: "Example Number Field"|t,
    name: "exampleNumberField",
    size: 10,
    value: (settings.exampleNumberField is defined ? settings.exampleNumberField : null)
}) }}

{{ forms.selectField({
    label: "Example Dropdown Field (Text)"|t,
    name: "exampleDropdownFieldText",
    options: {
        "exampleDropdownZero": "Example Dropdown Zero",
        "exampleDropdownOne": "Example Dropdown One",
        "exampleDropdownTwo": "Example Dropdown Two",
        "exampleDropdownThree": "Example Dropdown Three"
    },
    value: "three"
}) }}

{{ forms.selectField({
    label: "Example Dropdown Field (Numbers)"|t,
    name: "exampleDropdownFieldNumbers",
    options: {
        0: 0,
        1: 1,
        2: 2,
        3: 3
    },
    value: 2
}) }}

{{ forms.radioGroupField({
    label: "Example Radio Buttons Field"|t,
    name: "exampleRadioButtonsField",
    options: {
        0: 'Example Radio Zero',
        1: 'Example Radio One',
        2: 'Example Radio Two',
        3: 'Example Radio Three'
    },
    value: 1
}) }}

{{ forms.checkboxField({
    label: "Example Standalone Checkbox Field"|t,
    name: "exampleStandaloneCheckboxField",
    value: 1,
    checked: true
}) }}

{{ forms.checkboxSelectField({
    label: "Example Checkbox Select Field"|t,
    name: "exampleCheckboxSelectField",
    options: {
        0: 'Example Checkbox Select Zero',
        1: 'Example Checkbox Select One',
        2: 'Example Checkbox Select Two',
        3: 'Example Checkbox Select Three'
    },
    values: [1,3],
    showAllOption: true
}) }}

<hr>

<h3>{{ "Toggle Field Groups"|t }}</h3>

{# You can conditionally display fields using Craft's 'toggle' and 'reverseToggle' form field attributes. Note the new 'toggle' attribute that targets the ID of a div somewhere else in our settings. When a field with a 'toggle' attribute is clicked, the target element will display or hide content. #}

{# If you are not sure if an option will be defined by the user, you can give it a default value #}
{% set isEnabled = settings.exampleDisplayConditionalSettings is defined ? settings.exampleDisplayConditionalSettings : false %}

{{ forms.lightswitchField({
    label: "Display or Hide Some Conditional Options"|t,
    name: 'exampleDisplayConditionalSettings',
    on: isEnabled,
    toggle: "toggle-targetIdToToggle",
    first: true
}) }}

<div id='toggle-targetIdToToggle'
    class="{% if not isEnabled %}hidden{% endif %}">

    {{ forms.textField({
        label: "Example Hidden Number Field"|t,
        name: "exampleHiddenNumberField",
        size: 10,
        value: (settings.exampleHiddenNumberField is defined ? settings.exampleHiddenNumberField : null)
    }) }}

    {{ forms.selectField({
        label: "Example Hidden Dropdown Field"|t,
        name: "exampleHiddenDropdownField",
        options: {
            "exampleHiddenDropdownZero": "Example Hidden Dropdown Zero",
            "exampleHiddenDropdownOne": "Example Hidden Dropdown One",
            "exampleHiddenDropdownTwo": "Example Hidden Dropdown Two",
            "exampleHiddenDropdownThree": "Example Hidden Dropdown Three"
        },
        value: "three"
    }) }}

</div>

<hr>

<h3>{{ "Date Fields"|t }}</h3>

{# DateTime Fields are more advanced and require a few extra steps to get working. To get a DateTime field setup properly you must:

1. Name your DateTime field with the prefix 'datetime'. For example, if you name your Start Date field 'startDate' it will not validate properly. You will need to name it 'datetimeStartDate' for the Sprout Reports Twig Template Data Source to know that it's a DateTime field and treat it like one.
2. Give your DateTime field an ID. You will need this ID to display the datepicker popup in the Control Panel.
3. Add some additional javascript that attaches the datepicker to your DateTime field. See the example with additional details below.
#}

{# This field is named with the 'datetime' prefix: 'datetimeStartDate' and has an ID of the same name. #}
{{ forms.dateTimeField({
    label: "Start Date"|t,
    instructions: "The start date of the date range you wish to display in your report."|t,
    id: 'datetimeStartDate',
    name: 'datetimeStartDate',
    value: settings.datetimeStartDate is defined ? settings.datetimeStartDate : now|date_modify("-30 days")
}) }}

{# This field is named with the 'datetime' prefix: 'datetimeEndDate' and has an ID of the same name. #}
{{ forms.dateTimeField({
    label: "End Date"|t,
    instructions: "The end date of the date range you wish to display in your report."|t,
    id: 'datetimeEndDate',
    name: 'datetimeEndDate',
    value: (settings.datetimeEndDate is defined ? settings.datetimeEndDate : now)
}) }}

{# The following javascript enables the datepicker for our DateTime field in the Control Panel. Note that the ID of the field is a bit different than above. When your report's settings load in the Control Panel, the ID is dynamically updated, wrapping it with a prefix and suffix. You will want to use this updated class ID in your javascript:

    datetimeStartDate => settings-datetimeStartDate-field
    datetimeEndDate => settings-datetimeEndDate-field

Additionally, you can set a Default Date value for your datepicker field. Below, we set the Start Date to one month before today and the End Date to the current day.
#}
{%- includejs %}

    $('#settings-datetimeStartDate-field .datewrapper input:first-of-type').datepicker($.extend({
    defaultDate: new Date({{ now.year }}, {{ now.month-1 }}, {{ now.day }})
    }, Craft.datepickerOptions));

    $('#settings-datetimeEndDate-field .datewrapper input:first-of-type').datepicker($.extend({
    defaultDate: new Date({{ now.year }}, {{ now.month }}, {{ now.day }})
    }, Craft.datepickerOptions));

    var $timePickerStartDate = $('#settings-datetimeStartDate-field .timewrapper input:first-of-type');
    var $timePickerEndDate = $('#settings-datetimeEndDate-field .timewrapper input:first-of-type');

    $timePickerStartDate.timepicker($.extend({}, Craft.timepickerOptions));
    $timePickerEndDate.timepicker($.extend({}, Craft.timepickerOptions));

    {% if settings.datetimeStartDate is defined and settings.datetimeStartDate.format is defined %}
        $timePicker.timepicker('setTime', {{ settings.datetimeStartDate|date('G') }}*3600 + {{ settings.datetimeStartDate|date('i') }}*60 + {{ settings.datetimeStartDate|date('s') }});
    {% endif %}

    {% if settings.datetimeEndDate is defined and settings.datetimeEndDate.format is defined %}
        $timePicker.timepicker('setTime', {{ settings.datetimeEndDate|date('G') }}*3600 + {{ settings.datetimeEndDate|date('i') }}*60 + {{ settings.datetimeEndDate|date('s') }});
    {% endif %}

{%- endincludejs %}

